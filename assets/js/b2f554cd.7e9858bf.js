"use strict";(self.webpackChunktechharvesting=self.webpackChunktechharvesting||[]).push([[477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"customize-linux-unix-terminal","metadata":{"permalink":"/blog/customize-linux-unix-terminal","source":"@site/blog/2022-02-11-customize-linux-terminal.mdx","title":"Customize you Linux/Unix terminal!","description":"Customize your Terminal in Linux/Macos/WSL without ohmyzsh!","date":"2022-02-11T00:00:00.000Z","formattedDate":"February 11, 2022","tags":[{"label":"terminal","permalink":"/blog/tags/terminal"},{"label":"linux","permalink":"/blog/tags/linux"}],"readingTime":1.925,"truncated":true,"authors":[{"name":"Naseel Niyas","title":"Full Stack Web Dev","url":"https://github.com/naseelniyas","imageURL":"https://github.com/naseelniyas.png","key":"naseelniyas"}],"frontMatter":{"title":"Customize you Linux/Unix terminal!","slug":"customize-linux-unix-terminal","authors":["naseelniyas"],"tags":["terminal","linux"]},"nextItem":{"title":"Setup tailwindcss with nextjs","permalink":"/blog/nextjs-tailwindcss"}},"content":"\x3c!--truncate--\x3e\\n\\n## Customize your Terminal in Linux/Macos/WSL without ohmyzsh!\\n\\n# Lets make that ugly terminal look better! \ud83d\udc1a\\n(I am Doing this on a Raspberrypi, but this can be done on Any Linux Distro, MacOS or Windows Subsystem for Linux if you are on windows)\\n\\n\x3c!--truncate--\x3e\\n### Before:\\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627456831336/OqBwd6Bby.png)\\n\\n### After: \\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627456846734/pF83r0fmr.png)\\n\\n\\nIf you have watched any other tutorials/posts like this, you know, that we use a package called `ohmyzsh`, but that slows down the shell a bit, so we will do it without `ohmyzsh`! Just normal `zsh`! (We will use a theme called `powerlevel10k`)\\n\\n\\n## Step 1: Install `zsh`\\nNow, most of Linux distributions come Pre Installed with `bash`, which is a shell, but we will use `zsh` in this tutorial <br /> <br />\\nSo to install zsh on `Ubuntu/Debian/Raspbian/Mint/Pop/Any debian based distro` run: \\n```bash\\nsudo apt update\\nsudo apt install zsh\\n```\\nNext run `zsh` on the command line to test if the installation worked\\nIf it did, you are ready for the next step \ud83c\udf8a\\n else *troubleshoot* the install \ud83d\ude15\\n\\n## Step 2: Changing the default shell\\nOpen up a new terminal and Bash will popup...\\nLet us make `zsh` the default \ud83d\ude0e\\n\\nTo Change the default shell, run: \\n```bash\\nchsh\\n```\\nand when prompted, enter `/bin/zsh` as the shell\\n\\nNow, open a new session, and boom there is `zsh`... still ugly though\\n\\n## Step 3: Style it up \ud83e\udd29\\n### Let us now install our theme `powerlevel10k`\\n\\nFirst you can install a recomended font... mostly a `nerd font` (Link to repo below) I use a font called `VictorMono NF` (also linked below)\\n\\nRun: \\n```bash\\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k\\necho \'source ~/powerlevel10k/powerlevel10k.zsh-theme\' >>~/.zshrc\\n```\\nThis installs `powerlevel10k`, When you open up a new session, you get a config wizard: \\n\\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627459246091/JU7CQPh7b.png)\\n\\nAnswer the question to your liking and then use your new **better** terminal!\\n\\n**And we did not use Ohmyzsh**\\n\\nSo how did you do it?\\nDo share your new shell look in the comments below! \\n\\nAlso **\ud83d\udc4d** this post if you found this *helpful*\\n\\n\\n## If you really want to use  `oh-my-zsh`, then watch my video on doing so!\\n<iframe src=\\"http://youtube.com/embed/ZDghjjwhzVs\\" width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" allowfullscreen></iframe>\\n\\n\\n# Links in this post \ud83c\udf10\\n[My `~/.p10k.zsh` file copy&paste if you want the same thing \ud83d\ude04](https://gist.github.com/NaseelNiyas/505dba153890058f7e268ae4b9f8a71e)\\n\\n [Powerlevel10k repo](https://github.com/romkatv/powerlevel10k) \\n\\n [Nerd Fonts Repo](https://github.com/ryanoasis/nerd-fonts) \\n\\n[Victor Mono NF](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/VictorMono)"},{"id":"nextjs-tailwindcss","metadata":{"permalink":"/blog/nextjs-tailwindcss","source":"@site/blog/2022-02-11-tailwindcss-with-nextjs.mdx","title":"Setup tailwindcss with nextjs","description":"Setup Tailwind CSS with Next.js","date":"2022-02-11T00:00:00.000Z","formattedDate":"February 11, 2022","tags":[{"label":"nextjs","permalink":"/blog/tags/nextjs"},{"label":"tailwindcss","permalink":"/blog/tags/tailwindcss"}],"readingTime":0.94,"truncated":true,"authors":[{"name":"Naseel Niyas","title":"Full Stack Web Dev","url":"https://github.com/naseelniyas","imageURL":"https://github.com/naseelniyas.png","key":"naseelniyas"}],"frontMatter":{"title":"Setup tailwindcss with nextjs","slug":"nextjs-tailwindcss","authors":["naseelniyas"],"tags":["nextjs","tailwindcss"]},"prevItem":{"title":"Customize you Linux/Unix terminal!","permalink":"/blog/customize-linux-unix-terminal"},"nextItem":{"title":"The best Nextjs Workflow","permalink":"/blog/nextjs-workflow"}},"content":"\x3c!--truncate--\x3e\\n\\n\\n## Setup Tailwind CSS with Next.js\\n\\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632979765809/HTEigfQR-.png)\\n\\n> Tailwind css is Super Awesome. It is my favorite CSS Framework.\\n> This post is all about setting it up with Next.js (My Favorite JavaScript framework)\\n\\n# The Shorter way\\n\\nIf you have not yet created a next.js project, then use this command to set it up with tailwind preconfigured for you!\\n\\n```bash\\nnpx create-next-app -e with-tailwindcss next-tailwind\\n```\\n\\nThen Change your directory:\\n\\n```bash\\ncd next-tailwind\\n```\\n\\nAnd start the server:\\n\\n```bash npm2yarn\\nnpm run dev\\n```\\n\\n# The Second Approach\\n\\nIf you have already got a project, it still is simple!\\n\\nFirst install a _few_ dependencies:\\n\\n```bash npm2yarn\\nnpm install -D tailwindcss@latest postcss@latest autoprefixer@latest\\n```\\n\\nThis should install tailwind, postcss and autoprefixer\\n\\nNext, Get generate your configuration for Tailwind and Postcss.\\n\\n```bash\\nnpx tailwindcss init -p\\n```\\n\\nThen, import it in your `pages/_app.js` file\\n\\n```jsx\\nimport \'tailwindcss/tailwind.css\';\\n```\\n\\nFinally, Run your server\\n\\n```bash npm2yarn\\nnpm run dev\\n```\\n\\nThat was all you needed to do to have tailwind in your project. If you apply a class now, it will reflect on the webpage.\\n\\n### Links\\n\\n[Tailwind CSS](https://tailwindcss.com/)\\n[Next.js](https://nextjs.org/)"},{"id":"nextjs-workflow","metadata":{"permalink":"/blog/nextjs-workflow","source":"@site/blog/2022-02-11-the-best-nextjs-workflow.mdx","title":"The best Nextjs Workflow","description":"The best next.js workflow with Typescript, sass and more!","date":"2022-02-11T00:00:00.000Z","formattedDate":"February 11, 2022","tags":[{"label":"nextjs","permalink":"/blog/tags/nextjs"},{"label":"typescript","permalink":"/blog/tags/typescript"},{"label":"react","permalink":"/blog/tags/react"}],"readingTime":3.085,"truncated":true,"authors":[{"name":"Naseel Niyas","title":"Full Stack Web Dev","url":"https://github.com/naseelniyas","imageURL":"https://github.com/naseelniyas.png","key":"naseelniyas"}],"frontMatter":{"title":"The best Nextjs Workflow","slug":"nextjs-workflow","authors":["naseelniyas"],"tags":["nextjs","typescript","react"]},"prevItem":{"title":"Setup tailwindcss with nextjs","permalink":"/blog/nextjs-tailwindcss"}},"content":"\x3c!--truncate--\x3e\\n\\n\\n## The best next.js workflow with Typescript, sass and more!\\n\\n\\n Do you use Next.js? then make sure you use these tools to boost your productivity and development experience!\\n\\n## Typescript\\n\\n![ts.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631503196236/-nmurDa0s.png)\\n\\n> Typescript is a very popular and good choice for using with Next.js or any other framework ! It is going to reduce the amount of errors we get by introducing a type system with JavaScript\\n\\nTo Create a Next.js project with **typescript** , run:\\n```bash\\nnpx create-next-app next-typescript-app --ts\\n```\\n\\nThis will create a next.js project with typescript support and also a `tsconfig.json` file (the **typescript configuration** file)\\n\\n## Sass\\n![sass.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631503254762/Tvmhj-xYd.png)\\n\\n> **Sass** is an awesome superset for css which supports a lot of features like nesting , `if` conditions and more. You can learn more about sass [here](https://sass-lang.com/documentation) \\n\\nIt is very simple to add `sass` to your project if you use next.js. Just add sass with\\n```bash npm2yarn\\nnpm install sass\\n```\\n\\nThen rename your `.css` files with `.scss` or `.sass` extensions. If you use the `.sass` extension, when you will have to **remove** the curly braces and the semicolons. Or you can use the `.scss` extension. You can also rename the css module files with the `.sass` or the `.scss` extension\\n\\n## Prettier\\n\\n![prettier.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631504232931/aSwstYs-C.png)\\n\\n> Does your code not get formatted the way you want? use Prettier! prettier is a code formatter which is also very popular you can learn more about prettier  [here](https://prettier.io/) \\n\\nTo add prettier to your project, run:\\n```bash npm2yarn\\nnpm install prettier -D\\n```\\n\\nI also create a npm script in my `package.json` to format my code. ( I named it *clean*)\\n\\n```json\\n  \\"scripts\\": {\\n    \\"dev\\": \\"next dev\\",\\n    \\"build\\": \\"next build\\",\\n    \\"start\\": \\"next start\\",\\n    \\"lint\\": \\"next lint\\",\\n    \\"clean\\": \\"prettier --write .\\"\\n  }\\n```\\nSo now when you run `npm run clean` of `yarn clean` you will see that your code gets clean. I also create a `.prettierrc` file in the root of my project and give the following in it:\\n\\n```json\\n{\\n  \\"singleQuote\\": true\\n}\\n```\\nBut if you look carefully, then you will find you that it also format the files in our `.next` folder created by next.js, so to *ignore* the files in the `.next` folder, create a `.prettierignore` file at the root of your project with the following contents\\n```sh\\n# next.js dev server files\\n.next/\\n# npm packages\\nnode_modules/\\n```\\n\\n## Using husky to format code\\n<center>\\n <h1><font size=\'100\'>\ud83d\udc36</font></h1>\\n</center>\\n\\nI did not find a logo for husky \ud83e\udd37\u200d\u2642\ufe0f\\n\\n> If you use git, this will be super useful! you can create a git hook, which will format our code before each commit.\\n\\nSince we have prettier already installed, run:\\n```sh\\nnpx mrm@2 lint-staged\\n```\\nWe are also using husky in here. so it will create a `.husky` folder\\n\\nAnd in our `package.json`, in the `lint-staged` section, change to the following if using typescript\\n```json\\n  \\"lint-staged\\": {\\n    \\"*.ts\\": \\"eslint --cache --fix\\",\\n    \\"*.{tsx,.ts,css,md}\\": \\"prettier --write\\"\\n  }\\n```\\n\\nNow, I did a quick commit with\\n```bash\\ngit commit -m \'\ud83e\udd8b Formatting with Prettier\'\\n```\\nand.....   Our code is pretty as we specified in our `.prettierrc` file\\n\\n## Testing \ud83e\uddea\\n\\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631506691302/XW4sUx0Pw.png)\\n> If you want to test your next.js application, use `cypress` as shown in the next.js  [docs](https://nextjs.org/docs/testing) \\n\\nInstall cypress by running:\\n```bash npm2yarn\\nnpm install -D cypress\\n```\\n\\n:::tip\\n\\nCypress is used for **end to end testing** of your next.js application.\\n\\n:::\\n\\nCreate a cypress script\\n```json\\n\\"test\\": \\"cypress open\\"\\n```\\n\\nRun cypress with\\n```bash npm2yarn\\nnpm run test\\n```\\n\\nYou can create your tests now ( I am not showing anything now). You can learn more  [here](https://nextjs.org/docs/testing) \\n\\nThat was it! You can of course add on to this list...\\n**Thanks for reading** \ud83d\ude01\\n\\n# \ud83d\udc4b\ud83d\udc4b"}]}')}}]);